"=============================================================
"  Author: Amisi Kiarie                                      =
"  File: .vimrc                                              =
"=============================================================

" General Settings
    " Pathogen
        call pathogen#infect() 
        call pathogen#helptags()
        syntax on
        filetype plugin indent on

    " UI
        let base16colorspace=256
        colorscheme base16-default-dark
        set background=dark
        hi Normal ctermbg=none
        highlight NonText ctermbg=none

    " Folding
        set foldmethod=indent   
        set foldnestmax=10
        set foldlevel=7
        set foldlevelstart=7

    " Syntastic
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_wq = 0
        let g:syntastic_cpp_compiler = 'g++'
        let g:syntastic_cpp_compiler_options = ' -std=c++11'
        let g:syntastic_auto_jump = 1

    " Local vim
        let g:localvimrc_ask = 0

    " Highlight
        set hlsearch

    " Line numbers
        set relativenumber
        set number
        highlight LineNr ctermbg=none

    " Indentation/tab settigs
        set shiftwidth=4
        set tabstop=4
        set expandtab
        set autoindent
        set pastetoggle=<F2>

    " CFMT
        "let g:cfmt_style = '-linux -brf'
        "autocmd BufWritePre *.c,*.h Cfmt

    " Word docs
    autocmd BufReadPre *.docx set ro
    autocmd BufReadPost *.docx %!docx2txt.pl

    " Typing settings
        let loaded_delimitMate = 1
        au FileType mail let b:loaded_delimitMate = 1

    " Abbreviations
        "abbreviate )( ()
        "abbreviate ][ []
        "abbreviate }{ {}
        "abbrev texit textit


    " Put plugins and dictionaries in this dir (also on Windows)
        let vimDir = '$HOME/.vim'
        let &runtimepath.=','.vimDir


    " Keep undo history across sessions by storing it in a file
        if has('persistent_undo')
            let myUndoDir = expand(vimDir . '/undodir')
            " Create dirs
            call system('mkdir ' . vimDir)
            call system('mkdir ' . myUndoDir)
            let &undodir = myUndoDir
            set undofile
        endif

" Functions
    function! Cycle_numbering() abort
      if exists('+relativenumber')
        execute {
              \ '00': 'set relativenumber   | set number',
              \ '01': 'set norelativenumber | set number',
              \ '10': 'set norelativenumber | set nonumber',
              \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
      else
        " No relative numbering, just toggle numbers on and off.
        set number!<CR>
      endif
    endfunction

" Mappings
    " Leaders
        let mapleader = ' '
        let maplocalleader = ','

    " General commands
        " Simplifying command key
            nmap ; :
            vmap ; :

        " Cycling 
            nnoremap <silent> <leader>r :call Cycle_numbering()<CR>

        " Switching thorugh buffer
            nmap { :up<CR>:bN<CR>
            nmap } :up<CR>:bn<CR>

            nnoremap <leader>[ {
            nnoremap <leader>] }

        " Navigating between splits
            nnoremap <c-j> <c-w>j
            nnoremap <c-k> <c-w>k
            nnoremap <c-h> <c-w>h
            nnoremap <c-l> <c-w>l

        " Split lines
            nnoremap K i<CR><Esc>

        " Change escape in insert
            inoremap jk <esc>

        " Insert empty lines
            nnoremap <leader>k O<esc>
            nnoremap <leader>j o<esc>

        " Toggles
            nnoremap <leader>l :TagbarToggle<CR>
            nnoremap <leader>e :NERDTreeToggle<CR>

        " Prevent v-mode paste from over-writing
            vnoremap p "_dP
        "
        " Remove highlighting
            nmap <C-I> :nohlsearch <CR>
            
        " Checking
             "autocmd filetype text call AutoCorrect()

" Autocommands
